{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { getMonths } from \"./months\";\nimport { MobileDatePickerContainer } from \"./styles.styled\";\nconst MobileDatePicker = ({ value, minYear = 1970, maxYear = new Date().getFullYear(), lang = \"en\", onChange, onClose, className, isAppearTheDataInTheHeader = true, isAppearClearButton = true, dashOrSlashBetweenTheDate = \"/\", dateFormat = \"YYYY-MM-DD\", minDate, maxDate, }) => {\n    const initialDate = value || new Date();\n    const [year, setYear] = useState(initialDate.getFullYear());\n    const [month, setMonth] = useState(initialDate.getMonth());\n    const [day, setDay] = useState(initialDate.getDate());\n    const years = Array.from({ length: maxYear - minYear + 1 }, (_, i) => minYear + i);\n    const months = getMonths(lang);\n    const daysInMonth = (y, m) => new Date(y, m + 1, 0).getDate();\n    const dayList = Array.from({ length: daysInMonth(year, month) }, (_, r) => r + 1);\n    const isDateAllowed = (y, m, d) => {\n        const candidate = new Date(y, m, d);\n        if (minDate && candidate < minDate)\n            return false;\n        if (maxDate && candidate > maxDate)\n            return false;\n        return true;\n    };\n    // Check if any day exists in a month\n    const isMonthAllowed = (y, m) => {\n        const days = daysInMonth(y, m);\n        for (let d = 1; d <= days; d++) {\n            if (isDateAllowed(y, m, d))\n                return true;\n        }\n        return false;\n    };\n    // Check if any month exists in a year\n    const isYearAllowed = (y) => {\n        for (let m = 0; m < 12; m++) {\n            if (isMonthAllowed(y, m))\n                return true;\n        }\n        return false;\n    };\n    const formatDate = () => {\n        switch (dateFormat) {\n            case \"DD/MM/YYYY\":\n                return `${day}${dashOrSlashBetweenTheDate}${month + 1}${dashOrSlashBetweenTheDate}${year}`;\n            case \"MM-DD-YYYY\":\n                return `${month + 1}${dashOrSlashBetweenTheDate}${day}${dashOrSlashBetweenTheDate}${year}`;\n            default:\n                return `${year}${dashOrSlashBetweenTheDate}${month + 1}${dashOrSlashBetweenTheDate}${day}`;\n        }\n    };\n    const handleSave = () => {\n        const d = new Date(year, month, day);\n        if (isDateAllowed(year, month, day)) {\n            onChange?.(d);\n            onClose?.();\n        }\n    };\n    const handleClear = () => {\n        onChange?.(null);\n        onClose?.();\n        const today = new Date();\n        setYear(today.getFullYear());\n        setMonth(today.getMonth());\n        setDay(today.getDate());\n    };\n    return (_jsxs(MobileDatePickerContainer, { className: className, children: [isAppearTheDataInTheHeader && (_jsx(\"div\", { className: \"header\", children: formatDate() })), _jsxs(\"div\", { className: \"picker\", children: [_jsx(\"div\", { className: \"column\", children: years.map((y) => {\n                            const allowed = isYearAllowed(y);\n                            return (_jsx(\"div\", { className: `item ${y === year ? \"selected\" : \"\"} ${!allowed ? \"disabled\" : \"\"}`, onClick: () => allowed && setYear(y), children: y }, y));\n                        }) }), _jsx(\"div\", { className: \"column\", children: months.map((m, idx) => {\n                            const allowed = isMonthAllowed(year, idx);\n                            return (_jsx(\"div\", { className: `item ${idx === month ? \"selected\" : \"\"} ${!allowed ? \"disabled\" : \"\"}`, onClick: () => allowed && setMonth(idx), children: m }, m));\n                        }) }), _jsx(\"div\", { className: \"column\", children: dayList.map((d) => {\n                            const allowed = isDateAllowed(year, month, d);\n                            return (_jsx(\"div\", { className: `item ${d === day ? \"selected\" : \"\"} ${!allowed ? \"disabled\" : \"\"}`, onClick: () => allowed && setDay(d), children: d }, d));\n                        }) })] }), _jsxs(\"div\", { className: \"footer\", children: [isAppearClearButton && (_jsx(\"div\", { className: \"btn clearBtn\", onClick: handleClear, children: lang === \"en\" ? \"Clear\" : lang === \"ku\" ? \"پاک کردن\" : \"حذف\" })), _jsx(\"div\", { className: \"btn saveBtn\", onClick: handleSave, children: lang === \"en\" ? \"Save\" : lang === \"ku\" ? \"ذخیره\" : \"حفظ\" })] })] }));\n};\nexport default MobileDatePicker;\n","references":["/Users/opensooq/Desktop/My Mobile date picker/my-react-mobile-datepicker/node_modules/@types/react/index.d.ts","/Users/opensooq/Desktop/My Mobile date picker/my-react-mobile-datepicker/src/months.ts","/Users/opensooq/Desktop/My Mobile date picker/my-react-mobile-datepicker/src/styles.styled.ts"]}
