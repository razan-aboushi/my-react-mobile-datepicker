{"code":"import { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { getMonths } from \"./months\";\nimport { MobileDatePickerContainer } from \"./styles.styled\";\nconst MobileDatePicker = ({ value, minYear = 1970, maxYear = new Date().getFullYear(), lang = \"en\", onChange, onClose, className, }) => {\n    // If value is null or undefined, fallback to today\n    const initialDate = value || new Date();\n    const [year, setYear] = useState(initialDate.getFullYear());\n    const [month, setMonth] = useState(initialDate.getMonth());\n    const [day, setDay] = useState(initialDate.getDate());\n    const years = Array.from({ length: maxYear - minYear + 1 }, (_, i) => minYear + i);\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const dayList = Array.from({ length: daysInMonth }, (_, r) => r + 1);\n    const months = getMonths(lang);\n    const handleSave = () => {\n        const d = new Date(year, month, day);\n        onChange?.(d);\n        onClose?.();\n    };\n    const handleClear = () => {\n        onChange?.(null);\n        onClose?.();\n        // Reset to today after clearing\n        const today = new Date();\n        setYear(today.getFullYear());\n        setMonth(today.getMonth());\n        setDay(today.getDate());\n    };\n    return (_jsxs(MobileDatePickerContainer, { className: className, children: [_jsxs(\"div\", { className: \"header\", children: [year, \"/\", month + 1, \"/\", day] }), _jsxs(\"div\", { className: \"picker\", children: [_jsx(\"div\", { className: \"column\", children: years.map((y) => (_jsx(\"div\", { className: `item ${y === year ? \"selected\" : \"\"}`, onClick: () => setYear(y), children: y }, y))) }), _jsx(\"div\", { className: \"column\", children: months.map((m, idx) => (_jsx(\"div\", { className: `item ${idx === month ? \"selected\" : \"\"}`, onClick: () => setMonth(idx), children: m }, m))) }), _jsx(\"div\", { className: \"column\", children: dayList.map((d) => (_jsx(\"div\", { className: `item ${d === day ? \"selected\" : \"\"}`, onClick: () => setDay(d), children: d }, d))) })] }), _jsxs(\"div\", { className: \"footer\", children: [_jsx(\"div\", { className: \"btn clearBtn\", onClick: handleClear, children: lang === \"en\" ? \"Clear\" : lang === \"ku\" ? \"پاک کردن\" : \"حذف\" }), _jsx(\"div\", { className: \"btn saveBtn\", onClick: handleSave, children: lang === \"en\" ? \"Save\" : lang === \"ku\" ? \"ذخیره\" : \"حفظ\" })] })] }));\n};\nexport default MobileDatePicker;\n","references":["/Users/opensooq/Desktop/My Mobile date picker/my-react-mobile-datepicker/node_modules/@types/react/index.d.ts","/Users/opensooq/Desktop/My Mobile date picker/my-react-mobile-datepicker/src/months.ts","/Users/opensooq/Desktop/My Mobile date picker/my-react-mobile-datepicker/src/styles.styled.ts"]}
